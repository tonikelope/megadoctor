/*
 __  __ _____ ____    _    ____   ___   ____ _____ ___  ____  
|  \/  | ____/ ___|  / \  |  _ \ / _ \ / ___|_   _/ _ \|  _ \ 
| |\/| |  _|| |  _  / _ \ | | | | | | | |     | || | | | |_) |
| |  | | |__| |_| |/ ___ \| |_| | |_| | |___  | || |_| |  _ < 
|_|  |_|_____\____/_/   \_\____/ \___/ \____| |_| \___/|_| \_\
                                                              
by tonikelope

 */
package com.tonikelope.megadoctor;

import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.JFileChooser;

/**
 *
 * @author tonikelope
 */
public class UploadFileDialog extends javax.swing.JDialog implements Refresheable {

    public static String LAST_FOLDER = null;

    public boolean isAuto() {
        return _auto;
    }

    public boolean isSplit_folder() {
        return _split_folder;
    }

    public String getEmail() {
        return _email;
    }

    public boolean isOk() {
        return _ok;
    }

    public String getLocal_path() {
        return _lpath;
    }

    public String getRemote_path() {
        return _rpath;
    }

    public long getLocal_size() {
        return _local_size;
    }

    private volatile boolean _ok = false;
    private volatile long _local_size = 0;
    private volatile long _free_space = 0;
    private volatile String _email = null;
    private volatile String _link = null;
    private volatile String _lpath = null;
    private volatile String _rpath = null;
    private volatile boolean _split_folder = false;
    private volatile boolean _auto = false;
    private volatile boolean _init = false;
    private final AtomicBoolean _terminate_walk_tree = new AtomicBoolean();
    private static volatile String LAST_EMAIL = null;

    public UploadFileDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        _init = true;

        local_path_scroll_panel.getHorizontalScrollBar().setPreferredSize(new Dimension(0, 10));

        _terminate_walk_tree.set(false);

        split_folder_checkbox.setVisible(false);

        Helpers.JTextFieldRegularPopupMenu.addLiteMEGAAccountPopupMenuTo(account_stats_textarea, this);

        vamos_button.setEnabled(false);

        ArrayList<String> emails = new ArrayList<>();

        for (String email : Main.MEGA_ACCOUNTS.keySet()) {
            emails.add(email);
        }

        Collections.sort(emails);

        for (String email : emails) {
            email_combobox.addItem(email);
        }

        email_combobox.setSelectedItem(LAST_EMAIL != null ? LAST_EMAIL : emails.get(0));

        progress.setIndeterminate(true);

        progress.setVisible(false);

        local_folder_progress.setIndeterminate(true);

        local_folder_progress.setVisible(false);

        _init = false;

        email_comboboxItemStateChanged(null);

        pack();
    }

    private boolean checkFreeSpace() {

        if (_local_size > 0 && _free_space > 0) {

            if (auto_select_account.isSelected()) {
                if (_local_size > 0) {
                    Helpers.GUIRun(() -> {
                        vamos_button.setEnabled(true);
                    });
                    return true;
                }
            } else if (_local_size > _free_space) {
                Helpers.GUIRun(() -> {
                    free_space.setForeground(Color.red);
                    vamos_button.setEnabled(false);
                });
                return false;
            } else {
                Helpers.GUIRun(() -> {
                    free_space.setForeground(new Color(0, 153, 0));
                    vamos_button.setEnabled(true);
                });
                return true;
            }
        } else {

            Helpers.GUIRun(() -> {
                vamos_button.setEnabled(_link != null);
            });

            return _link != null;
        }

        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        email_combobox = new javax.swing.JComboBox<>();
        vamos_button = new javax.swing.JButton();
        local_file_button = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        remote_path = new javax.swing.JTextField();
        local_folder_button = new javax.swing.JButton();
        free_space = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        local_size = new javax.swing.JLabel();
        account_stats_scroll = new javax.swing.JScrollPane();
        account_stats_textarea = new javax.swing.JTextArea();
        local_folder_progress = new javax.swing.JProgressBar();
        mega_button = new javax.swing.JButton();
        auto_select_account = new javax.swing.JCheckBox();
        split_folder_checkbox = new javax.swing.JCheckBox();
        local_path_scroll_panel = new javax.swing.JScrollPane();
        local_path = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("UPLOAD");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        email_combobox.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        email_combobox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        email_combobox.setDoubleBuffered(true);
        email_combobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                email_comboboxItemStateChanged(evt);
            }
        });

        vamos_button.setBackground(new java.awt.Color(0, 153, 0));
        vamos_button.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        vamos_button.setForeground(new java.awt.Color(255, 255, 255));
        vamos_button.setText("LET'S GO");
        vamos_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        vamos_button.setDoubleBuffered(true);
        vamos_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vamos_buttonActionPerformed(evt);
            }
        });

        local_file_button.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        local_file_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/file.png"))); // NOI18N
        local_file_button.setText("FILE");
        local_file_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        local_file_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                local_file_buttonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        jLabel2.setText("Remote path (optional):");

        remote_path.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N

        local_folder_button.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        local_folder_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder.png"))); // NOI18N
        local_folder_button.setText("FOLDER");
        local_folder_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        local_folder_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                local_folder_buttonActionPerformed(evt);
            }
        });

        free_space.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        free_space.setText("---");
        free_space.setToolTipText("Free account space");
        free_space.setDoubleBuffered(true);

        local_size.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        local_size.setDoubleBuffered(true);

        account_stats_textarea.setEditable(false);
        account_stats_textarea.setBackground(new java.awt.Color(102, 102, 102));
        account_stats_textarea.setColumns(20);
        account_stats_textarea.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        account_stats_textarea.setForeground(new java.awt.Color(255, 255, 255));
        account_stats_textarea.setRows(5);
        account_stats_textarea.setDoubleBuffered(true);
        account_stats_scroll.setViewportView(account_stats_textarea);

        local_folder_progress.setDoubleBuffered(true);

        mega_button.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        mega_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mega.png"))); // NOI18N
        mega_button.setText("MEGA LINK");
        mega_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mega_button.setDoubleBuffered(true);
        mega_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mega_buttonActionPerformed(evt);
            }
        });

        auto_select_account.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        auto_select_account.setText("AUTO");
        auto_select_account.setToolTipText("Auto search an account with free space");
        auto_select_account.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        auto_select_account.setDoubleBuffered(true);
        auto_select_account.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                auto_select_accountActionPerformed(evt);
            }
        });

        split_folder_checkbox.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        split_folder_checkbox.setText("Split folder");
        split_folder_checkbox.setToolTipText("Create a transfer for every folder child (first level)");
        split_folder_checkbox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        split_folder_checkbox.setDoubleBuffered(true);
        split_folder_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                split_folder_checkboxActionPerformed(evt);
            }
        });

        local_path_scroll_panel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        local_path.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        local_path_scroll_panel.setViewportView(local_path);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(local_folder_progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(account_stats_scroll, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(auto_select_account)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(split_folder_checkbox)
                        .addGap(18, 18, 18)
                        .addComponent(free_space)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(email_combobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(vamos_button))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remote_path))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(local_file_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(local_folder_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mega_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(local_size)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(local_path_scroll_panel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(local_file_button)
                        .addComponent(local_folder_button)
                        .addComponent(local_size)
                        .addComponent(mega_button))
                    .addComponent(local_path_scroll_panel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(local_folder_progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(account_stats_scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(remote_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(free_space)
                    .addComponent(auto_select_account)
                    .addComponent(vamos_button)
                    .addComponent(split_folder_checkbox))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vamos_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vamos_buttonActionPerformed
        // TODO add your handling code here:

        if (!_lpath.isBlank()) {
            auto_select_account.setEnabled(false);
            split_folder_checkbox.setEnabled(false);
            local_file_button.setEnabled(false);
            local_folder_button.setEnabled(false);
            mega_button.setEnabled(false);
            vamos_button.setEnabled(false);
            progress.setVisible(true);

            File f = new File(_lpath);

            _rpath = remote_path.getText().isBlank() ? "/" : remote_path.getText().trim();

            if (auto_select_account.isSelected()) {

                if (f.isDirectory() && _split_folder) {

                    if (!_rpath.endsWith("/")) {
                        _rpath += "/";
                    }

                    if (_rpath.equals("/")) {
                        _rpath += f.getName() + "/";
                    }
                }

                _ok = true;
                dispose();

            } else {
                _email = (String) email_combobox.getSelectedItem();
                _ok = true;
                dispose();
            }
        } else {
            dispose();
        }

    }//GEN-LAST:event_vamos_buttonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (!progress.isVisible()) {

            _terminate_walk_tree.set(true);

            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void local_file_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_local_file_buttonActionPerformed
        // TODO add your handling code here:

        local_file_button.setEnabled(false);

        local_folder_button.setEnabled(false);

        mega_button.setEnabled(false);

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setPreferredSize(new Dimension(800, 600));

        if (LAST_FOLDER != null) {
            fileChooser.setCurrentDirectory(new File(LAST_FOLDER));
        }

        Helpers.updateComponentFont(fileChooser, fileChooser.getFont(), 1.20f);

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {

            File file = fileChooser.getSelectedFile();

            LAST_FOLDER = file.getParentFile().getAbsolutePath();

            _lpath = file.getAbsolutePath();

            local_path.setText(file.getAbsolutePath());

            local_size.setText("");

            _local_size = file.length();

            _link = null;

            local_size.setText(Helpers.formatBytes(_local_size));

            checkFreeSpace();
        }

        local_folder_button.setEnabled(true);

        local_file_button.setEnabled(true);

        mega_button.setEnabled(true);

        Helpers.smartPack(this);
    }//GEN-LAST:event_local_file_buttonActionPerformed

    private void local_folder_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_local_folder_buttonActionPerformed
        // TODO add your handling code here:

        local_folder_button.setEnabled(false);

        local_file_button.setEnabled(false);

        mega_button.setEnabled(false);

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setPreferredSize(new Dimension(800, 600));

        if (LAST_FOLDER != null) {
            fileChooser.setCurrentDirectory(new File(LAST_FOLDER));
        }

        Helpers.updateComponentFont(fileChooser, fileChooser.getFont(), 1.20f);

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {

            File file = fileChooser.getSelectedFile();

            LAST_FOLDER = file.getAbsolutePath();

            _lpath = file.getAbsolutePath();

            local_path.setText(file.getAbsolutePath());
            local_folder_progress.setVisible(true);
            local_folder_button.setText("Calculating folder size...");
            local_size.setText("");
            Helpers.threadRun(() -> {
                long size = Helpers.getDirectorySize(file, _terminate_walk_tree);
                if (size > 0) {
                    _local_size = size;
                    _link = null;
                    Helpers.GUIRun(() -> {
                        local_folder_button.setEnabled(true);
                        local_file_button.setEnabled(true);
                        mega_button.setEnabled(true);
                        local_folder_button.setText("FOLDER");
                        local_folder_progress.setVisible(false);
                        local_size.setText(Helpers.formatBytes(_local_size));
                        checkFreeSpace();
                    });
                }

            });
        } else {
            local_folder_button.setEnabled(true);
            local_file_button.setEnabled(true);
            mega_button.setEnabled(true);
            local_folder_button.setText("FOLDER");
        }

        Helpers.smartPack(this);
    }//GEN-LAST:event_local_folder_buttonActionPerformed

    private void email_comboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_email_comboboxItemStateChanged
        // TODO add your handling code here:

        if (!_init) {
            String email = (String) email_combobox.getSelectedItem();

            if (email != null && !email.isBlank() && email_combobox.isEnabled()) {
                LAST_EMAIL = email;
                progress.setVisible(true);
                email_combobox.setEnabled(false);
                local_file_button.setEnabled(false);
                local_folder_button.setEnabled(false);
                mega_button.setEnabled(false);
                vamos_button.setEnabled(false);
                account_stats_textarea.setText("");
                free_space.setText("");
                auto_select_account.setEnabled(false);

                Helpers.threadRun(() -> {

                    String stats = Main.MAIN_WINDOW.getAccountStatistics(email);

                    ConcurrentHashMap<String, Long> reserved = Helpers.getReservedTransfersSpace();

                    _free_space = Helpers.getAccountFreeSpace(email) - (reserved.containsKey(email) ? reserved.get(email) : 0);

                    Main.MAIN_WINDOW.parseAccountNodes(email);

                    Helpers.GUIRun(() -> {

                        free_space.setText(Helpers.formatBytes(_free_space));
                        account_stats_textarea.setText("[" + email + "] \n\n" + stats + "\n\n");
                        account_stats_textarea.setCaretPosition(0);
                        progress.setVisible(false);
                        email_combobox.setEnabled(true);
                        local_file_button.setEnabled(true);
                        local_folder_button.setEnabled(true);
                        mega_button.setEnabled(true);
                        vamos_button.setEnabled(true);
                        auto_select_account.setEnabled(true);
                        Helpers.smartPack(this);

                    });

                    checkFreeSpace();

                });
            }

        }
    }//GEN-LAST:event_email_comboboxItemStateChanged

    private void mega_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mega_buttonActionPerformed
        // TODO add your handling code here:
        boolean vamos_button_enabled = vamos_button.isEnabled();

        TextDialog dialog = new TextDialog(null, true);
        Helpers.setCenterOfParent(this, dialog);
        dialog.setVisible(true);

        if (dialog.getLink() != null) {
            auto_select_account.setSelected(false);
            auto_select_accountActionPerformed(evt);
            _link = dialog.getLink();
            local_path.setText(dialog.getLink());
            local_size.setText("");
            _local_size = 0;
            _lpath = dialog.getLink();
            vamos_button.setEnabled(true);

            Helpers.smartPack(this);
        } else {
            vamos_button.setEnabled(vamos_button_enabled);
        }
    }//GEN-LAST:event_mega_buttonActionPerformed

    private void auto_select_accountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auto_select_accountActionPerformed
        // TODO add your handling code here:

        if (_link != null && auto_select_account.isSelected()) {
            _local_size = 0;
            _email = null;
            _link = null;
            _lpath = null;
            _rpath = null;
            local_path.setText("");
        }

        _auto = auto_select_account.isSelected();
        free_space.setEnabled(!auto_select_account.isSelected());
        email_combobox.setEnabled(!auto_select_account.isSelected());
        account_stats_textarea.setEnabled(!auto_select_account.isSelected());
        split_folder_checkbox.setVisible(auto_select_account.isSelected());
        free_space.setVisible(!auto_select_account.isSelected());
        checkFreeSpace();
    }//GEN-LAST:event_auto_select_accountActionPerformed

    private void split_folder_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_split_folder_checkboxActionPerformed
        // TODO add your handling code here:
        _split_folder = split_folder_checkbox.isSelected();
    }//GEN-LAST:event_split_folder_checkboxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane account_stats_scroll;
    private javax.swing.JTextArea account_stats_textarea;
    private javax.swing.JCheckBox auto_select_account;
    private javax.swing.JComboBox<String> email_combobox;
    private javax.swing.JLabel free_space;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton local_file_button;
    private javax.swing.JButton local_folder_button;
    private javax.swing.JProgressBar local_folder_progress;
    private javax.swing.JLabel local_path;
    private javax.swing.JScrollPane local_path_scroll_panel;
    private javax.swing.JLabel local_size;
    private javax.swing.JButton mega_button;
    private javax.swing.JProgressBar progress;
    private javax.swing.JTextField remote_path;
    private javax.swing.JCheckBox split_folder_checkbox;
    private javax.swing.JButton vamos_button;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
        Helpers.GUIRun(() -> {
            email_comboboxItemStateChanged(null);
        });
    }

    @Override
    public void enableR(boolean enable) {
        Helpers.GUIRun(() -> {

            progress.setVisible(!enable);
            email_combobox.setEnabled(enable);

        });
    }
}
